// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PointlessWaymarksCmsWpfControls.WpfHtml
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Code\PointlessWaymarksCmsSpatiaLite\PointlessWaymarksCmsWpfControls\WpfHtml\PureInlineCss.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PureInlineCss : PureInlineCssBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/*!\r\nPure v2.0.1\r\nCopyright 2013 Yahoo!\r\nLicensed under the BSD License.\r\nhttps:/" +
                    "/github.com/pure-css/pure/blob/master/LICENSE.md\r\n*/\r\n/*!\r\nnormalize.css v | MIT" +
                    " License | git.io/normalize\r\nCopyright (c) Nicolas Gallagher and Jonathan Neal\r\n" +
                    "*/\r\n/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */" +
                    "html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:b" +
                    "lock}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow" +
                    ":visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:tr" +
                    "ansparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-" +
                    "decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weigh" +
                    "t:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-" +
                    "size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:ba" +
                    "seline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgro" +
                    "up,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}" +
                    "button,input{overflow:visible}button,select{text-transform:none}[type=button],[t" +
                    "ype=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-fo" +
                    "cus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button:" +
                    ":-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type" +
                    "=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outlin" +
                    "e:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:bo" +
                    "rder-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal" +
                    "}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=r" +
                    "adio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[" +
                    "type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appear" +
                    "ance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-web" +
                    "kit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:" +
                    "inherit}details{display:block}summary{display:list-item}template{display:none}[h" +
                    "idden]{display:none}html{font-family:sans-serif}.hidden,[hidden]{display:none!im" +
                    "portant}.pure-img{max-width:100%;height:auto;display:block}.pure-g{letter-spacin" +
                    "g:-.31em;text-rendering:optimizespeed;font-family:FreeSans,Arimo,\"Droid Sans\",He" +
                    "lvetica,Arial,sans-serif;display:flex;flex-flow:row wrap;align-content:flex-star" +
                    "t}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){table .pure" +
                    "-g{display:block}}.opera-only :-o-prefocus,.pure-g{word-spacing:-.43em}.pure-u{d" +
                    "isplay:inline-block;letter-spacing:normal;word-spacing:normal;vertical-align:top" +
                    ";text-rendering:auto}.pure-g [class*=pure-u]{font-family:sans-serif}.pure-u-1,.p" +
                    "ure-u-1-1,.pure-u-1-12,.pure-u-1-2,.pure-u-1-24,.pure-u-1-3,.pure-u-1-4,.pure-u-" +
                    "1-5,.pure-u-1-6,.pure-u-1-8,.pure-u-10-24,.pure-u-11-12,.pure-u-11-24,.pure-u-12" +
                    "-24,.pure-u-13-24,.pure-u-14-24,.pure-u-15-24,.pure-u-16-24,.pure-u-17-24,.pure-" +
                    "u-18-24,.pure-u-19-24,.pure-u-2-24,.pure-u-2-3,.pure-u-2-5,.pure-u-20-24,.pure-u" +
                    "-21-24,.pure-u-22-24,.pure-u-23-24,.pure-u-24-24,.pure-u-3-24,.pure-u-3-4,.pure-" +
                    "u-3-5,.pure-u-3-8,.pure-u-4-24,.pure-u-4-5,.pure-u-5-12,.pure-u-5-24,.pure-u-5-5" +
                    ",.pure-u-5-6,.pure-u-5-8,.pure-u-6-24,.pure-u-7-12,.pure-u-7-24,.pure-u-7-8,.pur" +
                    "e-u-8-24,.pure-u-9-24{display:inline-block;letter-spacing:normal;word-spacing:no" +
                    "rmal;vertical-align:top;text-rendering:auto}.pure-u-1-24{width:4.1667%}.pure-u-1" +
                    "-12,.pure-u-2-24{width:8.3333%}.pure-u-1-8,.pure-u-3-24{width:12.5%}.pure-u-1-6," +
                    ".pure-u-4-24{width:16.6667%}.pure-u-1-5{width:20%}.pure-u-5-24{width:20.8333%}.p" +
                    "ure-u-1-4,.pure-u-6-24{width:25%}.pure-u-7-24{width:29.1667%}.pure-u-1-3,.pure-u" +
                    "-8-24{width:33.3333%}.pure-u-3-8,.pure-u-9-24{width:37.5%}.pure-u-2-5{width:40%}" +
                    ".pure-u-10-24,.pure-u-5-12{width:41.6667%}.pure-u-11-24{width:45.8333%}.pure-u-1" +
                    "-2,.pure-u-12-24{width:50%}.pure-u-13-24{width:54.1667%}.pure-u-14-24,.pure-u-7-" +
                    "12{width:58.3333%}.pure-u-3-5{width:60%}.pure-u-15-24,.pure-u-5-8{width:62.5%}.p" +
                    "ure-u-16-24,.pure-u-2-3{width:66.6667%}.pure-u-17-24{width:70.8333%}.pure-u-18-2" +
                    "4,.pure-u-3-4{width:75%}.pure-u-19-24{width:79.1667%}.pure-u-4-5{width:80%}.pure" +
                    "-u-20-24,.pure-u-5-6{width:83.3333%}.pure-u-21-24,.pure-u-7-8{width:87.5%}.pure-" +
                    "u-11-12,.pure-u-22-24{width:91.6667%}.pure-u-23-24{width:95.8333%}.pure-u-1,.pur" +
                    "e-u-1-1,.pure-u-24-24,.pure-u-5-5{width:100%}.pure-button{display:inline-block;l" +
                    "ine-height:normal;white-space:nowrap;vertical-align:middle;text-align:center;cur" +
                    "sor:pointer;-webkit-user-drag:none;-webkit-user-select:none;-moz-user-select:non" +
                    "e;-ms-user-select:none;user-select:none;box-sizing:border-box}.pure-button::-moz" +
                    "-focus-inner{padding:0;border:0}.pure-button-group{letter-spacing:-.31em;text-re" +
                    "ndering:optimizespeed}.opera-only :-o-prefocus,.pure-button-group{word-spacing:-" +
                    ".43em}.pure-button-group .pure-button{letter-spacing:normal;word-spacing:normal;" +
                    "vertical-align:top;text-rendering:auto}.pure-button{font-family:inherit;font-siz" +
                    "e:100%;padding:.5em 1em;color:#444;color:rgba(0,0,0,.8);border:1px solid #999;bo" +
                    "rder:none transparent;background-color:#e6e6e6;text-decoration:none;border-radiu" +
                    "s:2px}.pure-button-hover,.pure-button:focus,.pure-button:hover{background-image:" +
                    "linear-gradient(transparent,rgba(0,0,0,.05) 40%,rgba(0,0,0,.1))}.pure-button:foc" +
                    "us{outline:0}.pure-button-active,.pure-button:active{box-shadow:0 0 0 1px rgba(0" +
                    ",0,0,.15) inset,0 0 6px rgba(0,0,0,.2) inset;border-color:#000}.pure-button-disa" +
                    "bled,.pure-button-disabled:active,.pure-button-disabled:focus,.pure-button-disab" +
                    "led:hover,.pure-button[disabled]{border:none;background-image:none;opacity:.4;cu" +
                    "rsor:not-allowed;box-shadow:none;pointer-events:none}.pure-button-hidden{display" +
                    ":none}.pure-button-primary,.pure-button-selected,a.pure-button-primary,a.pure-bu" +
                    "tton-selected{background-color:#0078e7;color:#fff}.pure-button-group .pure-butto" +
                    "n{margin:0;border-radius:0;border-right:1px solid #111;border-right:1px solid rg" +
                    "ba(0,0,0,.2)}.pure-button-group .pure-button:first-child{border-top-left-radius:" +
                    "2px;border-bottom-left-radius:2px}.pure-button-group .pure-button:last-child{bor" +
                    "der-top-right-radius:2px;border-bottom-right-radius:2px;border-right:none}.pure-" +
                    "form input[type=color],.pure-form input[type=date],.pure-form input[type=datetim" +
                    "e-local],.pure-form input[type=datetime],.pure-form input[type=email],.pure-form" +
                    " input[type=month],.pure-form input[type=number],.pure-form input[type=password]" +
                    ",.pure-form input[type=search],.pure-form input[type=tel],.pure-form input[type=" +
                    "text],.pure-form input[type=time],.pure-form input[type=url],.pure-form input[ty" +
                    "pe=week],.pure-form select,.pure-form textarea{padding:.5em .6em;display:inline-" +
                    "block;border:1px solid #ccc;box-shadow:inset 0 1px 3px #ddd;border-radius:4px;ve" +
                    "rtical-align:middle;box-sizing:border-box}.pure-form input:not([type]){padding:." +
                    "5em .6em;display:inline-block;border:1px solid #ccc;box-shadow:inset 0 1px 3px #" +
                    "ddd;border-radius:4px;box-sizing:border-box}.pure-form input[type=color]{padding" +
                    ":.2em .5em}.pure-form input[type=color]:focus,.pure-form input[type=date]:focus," +
                    ".pure-form input[type=datetime-local]:focus,.pure-form input[type=datetime]:focu" +
                    "s,.pure-form input[type=email]:focus,.pure-form input[type=month]:focus,.pure-fo" +
                    "rm input[type=number]:focus,.pure-form input[type=password]:focus,.pure-form inp" +
                    "ut[type=search]:focus,.pure-form input[type=tel]:focus,.pure-form input[type=tex" +
                    "t]:focus,.pure-form input[type=time]:focus,.pure-form input[type=url]:focus,.pur" +
                    "e-form input[type=week]:focus,.pure-form select:focus,.pure-form textarea:focus{" +
                    "outline:0;border-color:#129fea}.pure-form input:not([type]):focus{outline:0;bord" +
                    "er-color:#129fea}.pure-form input[type=checkbox]:focus,.pure-form input[type=fil" +
                    "e]:focus,.pure-form input[type=radio]:focus{outline:thin solid #129fea;outline:1" +
                    "px auto #129fea}.pure-form .pure-checkbox,.pure-form .pure-radio{margin:.5em 0;d" +
                    "isplay:block}.pure-form input[type=color][disabled],.pure-form input[type=date][" +
                    "disabled],.pure-form input[type=datetime-local][disabled],.pure-form input[type=" +
                    "datetime][disabled],.pure-form input[type=email][disabled],.pure-form input[type" +
                    "=month][disabled],.pure-form input[type=number][disabled],.pure-form input[type=" +
                    "password][disabled],.pure-form input[type=search][disabled],.pure-form input[typ" +
                    "e=tel][disabled],.pure-form input[type=text][disabled],.pure-form input[type=tim" +
                    "e][disabled],.pure-form input[type=url][disabled],.pure-form input[type=week][di" +
                    "sabled],.pure-form select[disabled],.pure-form textarea[disabled]{cursor:not-all" +
                    "owed;background-color:#eaeded;color:#cad2d3}.pure-form input:not([type])[disable" +
                    "d]{cursor:not-allowed;background-color:#eaeded;color:#cad2d3}.pure-form input[re" +
                    "adonly],.pure-form select[readonly],.pure-form textarea[readonly]{background-col" +
                    "or:#eee;color:#777;border-color:#ccc}.pure-form input:focus:invalid,.pure-form s" +
                    "elect:focus:invalid,.pure-form textarea:focus:invalid{color:#b94a48;border-color" +
                    ":#e9322d}.pure-form input[type=checkbox]:focus:invalid:focus,.pure-form input[ty" +
                    "pe=file]:focus:invalid:focus,.pure-form input[type=radio]:focus:invalid:focus{ou" +
                    "tline-color:#e9322d}.pure-form select{height:2.25em;border:1px solid #ccc;backgr" +
                    "ound-color:#fff}.pure-form select[multiple]{height:auto}.pure-form label{margin:" +
                    ".5em 0 .2em}.pure-form fieldset{margin:0;padding:.35em 0 .75em;border:0}.pure-fo" +
                    "rm legend{display:block;width:100%;padding:.3em 0;margin-bottom:.3em;color:#333;" +
                    "border-bottom:1px solid #e5e5e5}.pure-form-stacked input[type=color],.pure-form-" +
                    "stacked input[type=date],.pure-form-stacked input[type=datetime-local],.pure-for" +
                    "m-stacked input[type=datetime],.pure-form-stacked input[type=email],.pure-form-s" +
                    "tacked input[type=file],.pure-form-stacked input[type=month],.pure-form-stacked " +
                    "input[type=number],.pure-form-stacked input[type=password],.pure-form-stacked in" +
                    "put[type=search],.pure-form-stacked input[type=tel],.pure-form-stacked input[typ" +
                    "e=text],.pure-form-stacked input[type=time],.pure-form-stacked input[type=url],." +
                    "pure-form-stacked input[type=week],.pure-form-stacked label,.pure-form-stacked s" +
                    "elect,.pure-form-stacked textarea{display:block;margin:.25em 0}.pure-form-stacke" +
                    "d input:not([type]){display:block;margin:.25em 0}.pure-form-aligned input,.pure-" +
                    "form-aligned select,.pure-form-aligned textarea,.pure-form-message-inline{displa" +
                    "y:inline-block;vertical-align:middle}.pure-form-aligned textarea{vertical-align:" +
                    "top}.pure-form-aligned .pure-control-group{margin-bottom:.5em}.pure-form-aligned" +
                    " .pure-control-group label{text-align:right;display:inline-block;vertical-align:" +
                    "middle;width:10em;margin:0 1em 0 0}.pure-form-aligned .pure-controls{margin:1.5e" +
                    "m 0 0 11em}.pure-form .pure-input-rounded,.pure-form input.pure-input-rounded{bo" +
                    "rder-radius:2em;padding:.5em 1em}.pure-form .pure-group fieldset{margin-bottom:1" +
                    "0px}.pure-form .pure-group input,.pure-form .pure-group textarea{display:block;p" +
                    "adding:10px;margin:0 0 -1px;border-radius:0;position:relative;top:-1px}.pure-for" +
                    "m .pure-group input:focus,.pure-form .pure-group textarea:focus{z-index:3}.pure-" +
                    "form .pure-group input:first-child,.pure-form .pure-group textarea:first-child{t" +
                    "op:1px;border-radius:4px 4px 0 0;margin:0}.pure-form .pure-group input:first-chi" +
                    "ld:last-child,.pure-form .pure-group textarea:first-child:last-child{top:1px;bor" +
                    "der-radius:4px;margin:0}.pure-form .pure-group input:last-child,.pure-form .pure" +
                    "-group textarea:last-child{top:-2px;border-radius:0 0 4px 4px;margin:0}.pure-for" +
                    "m .pure-group button{margin:.35em 0}.pure-form .pure-input-1{width:100%}.pure-fo" +
                    "rm .pure-input-3-4{width:75%}.pure-form .pure-input-2-3{width:66%}.pure-form .pu" +
                    "re-input-1-2{width:50%}.pure-form .pure-input-1-3{width:33%}.pure-form .pure-inp" +
                    "ut-1-4{width:25%}.pure-form-message-inline{display:inline-block;padding-left:.3e" +
                    "m;color:#666;vertical-align:middle;font-size:.875em}.pure-form-message{display:b" +
                    "lock;color:#666;font-size:.875em}@media only screen and (max-width :480px){.pure" +
                    "-form button[type=submit]{margin:.7em 0 0}.pure-form input:not([type]),.pure-for" +
                    "m input[type=color],.pure-form input[type=date],.pure-form input[type=datetime-l" +
                    "ocal],.pure-form input[type=datetime],.pure-form input[type=email],.pure-form in" +
                    "put[type=month],.pure-form input[type=number],.pure-form input[type=password],.p" +
                    "ure-form input[type=search],.pure-form input[type=tel],.pure-form input[type=tex" +
                    "t],.pure-form input[type=time],.pure-form input[type=url],.pure-form input[type=" +
                    "week],.pure-form label{margin-bottom:.3em;display:block}.pure-group input:not([t" +
                    "ype]),.pure-group input[type=color],.pure-group input[type=date],.pure-group inp" +
                    "ut[type=datetime-local],.pure-group input[type=datetime],.pure-group input[type=" +
                    "email],.pure-group input[type=month],.pure-group input[type=number],.pure-group " +
                    "input[type=password],.pure-group input[type=search],.pure-group input[type=tel]," +
                    ".pure-group input[type=text],.pure-group input[type=time],.pure-group input[type" +
                    "=url],.pure-group input[type=week]{margin-bottom:0}.pure-form-aligned .pure-cont" +
                    "rol-group label{margin-bottom:.3em;text-align:left;display:block;width:100%}.pur" +
                    "e-form-aligned .pure-controls{margin:1.5em 0 0 0}.pure-form-message,.pure-form-m" +
                    "essage-inline{display:block;font-size:.75em;padding:.2em 0 .8em}}.pure-menu{box-" +
                    "sizing:border-box}.pure-menu-fixed{position:fixed;left:0;top:0;z-index:3}.pure-m" +
                    "enu-item,.pure-menu-list{position:relative}.pure-menu-list{list-style:none;margi" +
                    "n:0;padding:0}.pure-menu-item{padding:0;margin:0;height:100%}.pure-menu-heading," +
                    ".pure-menu-link{display:block;text-decoration:none;white-space:nowrap}.pure-menu" +
                    "-horizontal{width:100%;white-space:nowrap}.pure-menu-horizontal .pure-menu-list{" +
                    "display:inline-block}.pure-menu-horizontal .pure-menu-heading,.pure-menu-horizon" +
                    "tal .pure-menu-item,.pure-menu-horizontal .pure-menu-separator{display:inline-bl" +
                    "ock;vertical-align:middle}.pure-menu-item .pure-menu-item{display:block}.pure-me" +
                    "nu-children{display:none;position:absolute;left:100%;top:0;margin:0;padding:0;z-" +
                    "index:3}.pure-menu-horizontal .pure-menu-children{left:0;top:auto;width:inherit}" +
                    ".pure-menu-active>.pure-menu-children,.pure-menu-allow-hover:hover>.pure-menu-ch" +
                    "ildren{display:block;position:absolute}.pure-menu-has-children>.pure-menu-link:a" +
                    "fter{padding-left:.5em;content:\"\\25B8\";font-size:small}.pure-menu-horizontal .pu" +
                    "re-menu-has-children>.pure-menu-link:after{content:\"\\25BE\"}.pure-menu-scrollable" +
                    "{overflow-y:scroll;overflow-x:hidden}.pure-menu-scrollable .pure-menu-list{displ" +
                    "ay:block}.pure-menu-horizontal.pure-menu-scrollable .pure-menu-list{display:inli" +
                    "ne-block}.pure-menu-horizontal.pure-menu-scrollable{white-space:nowrap;overflow-" +
                    "y:hidden;overflow-x:auto;padding:.5em 0}.pure-menu-horizontal .pure-menu-childre" +
                    "n .pure-menu-separator,.pure-menu-separator{background-color:#ccc;height:1px;mar" +
                    "gin:.3em 0}.pure-menu-horizontal .pure-menu-separator{width:1px;height:1.3em;mar" +
                    "gin:0 .3em}.pure-menu-horizontal .pure-menu-children .pure-menu-separator{displa" +
                    "y:block;width:auto}.pure-menu-heading{text-transform:uppercase;color:#565d64}.pu" +
                    "re-menu-link{color:#777}.pure-menu-children{background-color:#fff}.pure-menu-dis" +
                    "abled,.pure-menu-heading,.pure-menu-link{padding:.5em 1em}.pure-menu-disabled{op" +
                    "acity:.5}.pure-menu-disabled .pure-menu-link:hover{background-color:transparent}" +
                    ".pure-menu-active>.pure-menu-link,.pure-menu-link:focus,.pure-menu-link:hover{ba" +
                    "ckground-color:#eee}.pure-menu-selected>.pure-menu-link,.pure-menu-selected>.pur" +
                    "e-menu-link:visited{color:#000}.pure-table{border-collapse:collapse;border-spaci" +
                    "ng:0;empty-cells:show;border:1px solid #cbcbcb}.pure-table caption{color:#000;fo" +
                    "nt:italic 85%/1 arial,sans-serif;padding:1em 0;text-align:center}.pure-table td," +
                    ".pure-table th{border-left:1px solid #cbcbcb;border-width:0 0 0 1px;font-size:in" +
                    "herit;margin:0;overflow:visible;padding:.5em 1em}.pure-table thead{background-co" +
                    "lor:#e0e0e0;color:#000;text-align:left;vertical-align:bottom}.pure-table td{back" +
                    "ground-color:transparent}.pure-table-odd td{background-color:#f2f2f2}.pure-table" +
                    "-striped tr:nth-child(2n-1) td{background-color:#f2f2f2}.pure-table-bordered td{" +
                    "border-bottom:1px solid #cbcbcb}.pure-table-bordered tbody>tr:last-child>td{bord" +
                    "er-bottom-width:0}.pure-table-horizontal td,.pure-table-horizontal th{border-wid" +
                    "th:0 0 1px 0;border-bottom:1px solid #cbcbcb}.pure-table-horizontal tbody>tr:las" +
                    "t-child>td{border-bottom-width:0}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class PureInlineCssBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
