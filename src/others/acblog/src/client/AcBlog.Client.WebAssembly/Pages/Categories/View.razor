@page "/categories/{id}"
@page "/categories/{id}/pages/{pageNumber:int}"
@using AcBlog.Data.Models.Builders
@inherits BaseCategoryPage
@inject AcBlog.Sdk.Filters.PostCategoryFilter Categories

<PageHeader>
    <PageHeaderTitle>@Category.OneNameOrDefault()</PageHeaderTitle>
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem>
                <a href="">
                    <MdiIcon Type="home" />
                    <span>Home</span>
                </a>
            </BreadcrumbItem>
            <BreadcrumbItem>
                <a href="categories">
                    <MdiIcon Type="folder" />
                    <span>Categories</span>
                </a>
            </BreadcrumbItem>
            @for (int i = 0; i < Category.Items.Count; i++)
            {
                string name = Category.Items[i];
                @if (i < Category.Items.Count - 1)
                {
                    CategoryBuilder builder = new CategoryBuilder();
                    builder.AddSubCategory(Category.Items.Take(i + 1).ToArray());
                    <BreadcrumbItem>
                        <a href="categories/@HttpUtility.UrlEncode(builder.Build().ToString())">
                            <span>@name</span>
                        </a>
                    </BreadcrumbItem>
                }
                else
                {
                    <BreadcrumbItem>
                        <span>@name</span>
                    </BreadcrumbItem>
                }
            }
        </Breadcrumb>
    </PageHeaderBreadcrumb>
</PageHeader>

<div class="container">
    <Loader OnLoad="@OnLoad" AutoLoad="@false" @ref="loader">
        <PagingList Data="@Data" Column="1" OnUpdatePage="@OnUpdatePage" OnPageTo="@OnPageTo" PageNavigationUrl="@PageNavigationUrl">
            <ItemTemplate>
                <PostListItem Id="@context" ShowType="true"></PostListItem>
            </ItemTemplate>
        </PagingList>
    </Loader>
</div>

@code {
    const int PageSize = 10;

    QueryResponse<string> Data { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public int? PageNumber { get; set; } = null;

    private Category Category = Category.Empty;

    private Loader loader;

    private string PageNavigationUrl;

    protected override void OnParametersSet()
    {
        PageNavigationUrl = $"/categories/{HttpUtility.UrlEncode(Id)}";
        Category = AcBlog.Data.Models.Category.Parse(Id);
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        await loader.Load();
    }

    private async Task OnLoad()
    {
        Title = "Loading...";
        Data = await Categories.Filter(Category, new Data.Models.Actions.Pagination
        {
            CurrentPage = PageNumber ?? 0,
            PageSize = PageSize
        });
        Title = $"Page {Data.CurrentPage.CurrentPage + 1} - {Category.ToString()}";
    }

    private async Task OnPageTo(int pageNumber)
    {
        PageNumber = pageNumber;
        await OnUpdatePage();
    }

    private async Task OnUpdatePage() => await loader.Load();
}
