@page "/posts/{id}"
@inject NotificationService NotificationService
@inherits BasePostPage
@using AcBlog.Client.WebAssembly.Components.Renderers

<Loader OnLoad="@OnLoad" OnLoaded="@OnLoaded">
    <PageHeader>
        <PageHeaderTitle>
            @Post.Title
        </PageHeaderTitle>
        <PageHeaderBreadcrumb>
            <Breadcrumb>
                <BreadcrumbItem>
                    <a href="">
                        <MdiIcon Type="home" />
                        <span>Home</span>
                    </a>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <a href="posts">
                        <MdiIcon Type="archive" />
                        <span>Posts</span>
                    </a>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <span>@Post.Id</span>
                </BreadcrumbItem>
            </Breadcrumb>
        </PageHeaderBreadcrumb>
        <PageHeaderExtra>
            <div class="btn-group-toggle my-auto" role="group">
                @if (IsProtected)
                {
                    <button class="btn btn-success mdi mdi-shield-key-outline" @onclick="e => inputPasswordModalVisible = true">Deprotect</button>
                }
                <AuthorizeView>
                    <Authorized>
                        <a class="btn btn-primary mdi mdi-square-edit-outline" href="posts/@HttpUtility.UrlEncode(Id)/edit">Edit</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </PageHeaderExtra>
        <PageHeaderTags>
            <PostMetadataDisplay Value="@Post" />
        </PageHeaderTags>
    </PageHeader>

    @if (IsProtected)
    {
        <Modal Title="@("Input Password")" Visible="inputPasswordModalVisible" OnOk="e=>OnPasswordSubmit()" OnCancel="e => inputPasswordModalVisible = false">
            <InputPassword @bind-Value="@Password" Size="@InputSize.Large" OnPressEnter="e=>OnPasswordSubmit()" />
        </Modal>
    }
    else
    {
        <div class="container">
            @switch (Post.Type)
            {
                case PostType.Article:
                case PostType.Note:
                    <ArticleRenderer Document="@Post.Content"></ArticleRenderer>
                    break;
                case PostType.Slides:
                    <SlidesRenderer Document="@Post.Content" Style="@SlidesStyle"></SlidesRenderer>
                    <button type="button" class="btn btn-primary mt-2" style="width: 100%;" @onclick="@OnFullViewClick">Full View</button>
                    break;
                default:
                    break;
            }
        </div>
    }
</Loader>

@code {
    [Parameter]
    public string Id { get; set; }

    private Post Post { get; set; }

    private bool IsProtected { get; set; } = false;

    private bool inputPasswordModalVisible = false;

    private string Password { get; set; } = string.Empty;

    private string SlidesStyle { get; set; } = "border: 0; height: 500px; width: 100%";

    private Task OnLoaded()
    {
        if (Post is null)
        {
            Title = "Loading...";
        }
        else
        {
            if (IsProtected)
            {
                Title = "Protected Post";
                inputPasswordModalVisible = true;
            }
            else
            {
                Title = Post.Title;
            }
        }
        return Task.CompletedTask;
    }

    private async Task OnLoad()
    {
        Post = await Service.PostService.Get(Id);
        IsProtected = await Service.PostService.Protector.IsProtected(Post.Content);
    }

    private async Task OnPasswordSubmit()
    {
        try
        {
            Document dep = await Service.PostService.Protector.Deprotect(Post.Content, new Data.Protections.ProtectionKey
            {
                Password = Password
            });
            Post.Content = dep;
            IsProtected = await Service.PostService.Protector.IsProtected(Post.Content);
            if (!IsProtected)
                inputPasswordModalVisible = false;
        }
        catch
        {
            inputPasswordModalVisible = true;

            await NotificationService.Error(new NotificationConfig
            {
                Message = "Wrong password",
            });
        }
    }

    private Task OnFullViewClick()
    {
        SlidesStyle = "left: 0; right: 0; top: 0; bottom: 0; margin:0; border:0; position: absolute; height: 100%; width:100%; z-index: 500;";
        return Task.CompletedTask;
    }
}
